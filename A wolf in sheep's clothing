// Wolves have been reintroduced to Great Britain. You are a sheep farmer, and are now plagued by wolves which pretend to be sheep. Fortunately, you are good at spotting them.
// Warn the sheep in front of the wolf that it is about to be eaten. Remember that you are standing at the front of the queue which is at the end of the array:
// [sheep, sheep, sheep, sheep, sheep, wolf, sheep, sheep]      (YOU ARE HERE AT THE FRONT OF THE QUEUE)
//    7      6      5      4      3            2      1
// If the wolf is the closest animal to you, return "Pls go away and stop eating my sheep". Otherwise, return "Oi! Sheep number N! You are about to be eaten by a wolf!" where N is the sheep's position in the queue.
// Note: there will always be exactly one wolf in the array.
// Examples
// Input: ["sheep", "sheep", "sheep", "wolf", "sheep"]
// Output: "Oi! Sheep number 1! You are about to be eaten by a wolf!"
// Input: ["sheep", "sheep", "wolf"]
// Output: "Pls go away and stop eating my sheep"
// !!! Note from me: I decided to add method of wolves count. And if there is no wolves, our farmer will do nothing. But if there are two or more wolves, he will ask for help from hunters.

func wolfCount(_ array: [String]) -> Int {
    var numberOfWolf = 0
    guard !array.isEmpty else {print("There are no wolf and no sheep right now")
                                      return numberOfWolf}
    let lowercasedArray = array.map {$0.lowercased()}
    for each in lowercasedArray {
        switch each {
            case "wolf": numberOfWolf += 1
            default: numberOfWolf += 0
        }
    }
    return numberOfWolf
}


func warnTheSheep(_ queue: [String]) -> String {
    guard wolfCount(queue) > 0 else {return "There is no wolf right now"}
    guard wolfCount(queue) < 2 else {return "There are too many wolves! Let's ask for help from hunters!"}
    var numberOfSheep = 0
    var say = ""
    let lowercasedQueue = queue.map {$0.lowercased()}
    let countAll = queue.count - 1
    let wolfIndex = lowercasedQueue.firstIndex(of: "wolf")
    let wolfAtLast = wolfIndex == countAll
    switch wolfAtLast {
        case true: say = "Pls go away and stop eating my sheep"
        default: numberOfSheep = countAll - wolfIndex!
        say = "Oi! Sheep number \(numberOfSheep)! You are about to be eaten by a wolf!"
    }
    return say
}
