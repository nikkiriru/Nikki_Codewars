// Definition
// Jumping number is the number that All adjacent digits in it differ by 1.
// Task
// Given a number, Find if it is Jumping or not .
// Notes
// Number passed is always Positive .
// Return the result as String .
// The difference between ‘9’ and ‘0’ is not considered as 1 .
// All single digit numbers are considered as Jumping numbers.
// Input >> Output Examples
// jumpingNumber(9) ==> return "Jumping!!"
// Explanation:
// It's single-digit number
// jumpingNumber(79) ==> return "Not!!"
// Explanation:
// Adjacent digits don't differ by 1

func numbersToArray(_ number: Int) -> [Int] {
    var arrayOfNumbers: [Int] = []
    var newNumber = number
    let range = 1...number.description.count
    for each in range {
        arrayOfNumbers.insert(newNumber % 10, at: 0)
        newNumber = newNumber / 10
    }
    return arrayOfNumbers
}

func jumpingNumber(_ number: Int) -> String {
    guard number >= 0 else {return "Input number should be positive"}
    let toString = number.description
    var returnedString = ""
    guard toString.count > 1 else {return "Jumping!!"}
    var array = numbersToArray(number)
    var eachInArray = array.first
    array[1...].forEach { eachNumber in
        let difference = abs(eachInArray! - eachNumber)
        if difference != 1 { 
            returnedString = "Not!!"
            return}
        else {eachInArray = eachNumber}
    }
    let finalString = returnedString == "Not!!" ? "Not!!" : "Jumping!!"
    return finalString
}
