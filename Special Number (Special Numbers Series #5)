// Definition
// A number is a Special Number if itâ€™s digits only consist 0, 1, 2, 3, 4 or 5
// Given a number determine if it special number or not .
// Notes
// The number passed will be positive (N > 0) .
// All single-digit numbers within the interval [1:5] are considered as special number.
// Input >> Output Examples
// specialNumber(2) ==> return "Special!!"
// Explanation:
// It's a single-digit number within the interval [1:5] .
// specialNumber(9) ==> return "NOT!!"
// Explanation:
// Although, it's a single-digit number but Outside the interval [1:5] .
// specialNumber(23) ==> return "Special!!"
// Explanation:
// All the number's digits formed from the interval [0:5] digits .
// specialNumber(39) ==> return "NOT!!"
// Explanation:
// Although, there is a digit (3) Within the interval But the second digit is not (Must be ALL The Number's Digits ) .
// specialNumber(59) ==> return "NOT!!"
// Explanation:
// Although, there is a digit (5) Within the interval But the second digit is not (Must be ALL The Number's Digits ) .

func specialNumber(_ number: Int) -> String {
    let specialRange = 0...5
    var answer = ""
    guard number >= 0 else {return "Number should be positive"}
    let toString = number.description
    if toString.count == 1 {
        answer = specialRange.contains(number) ? "Special!!" : "NOT!!"
    }
    else {
        let timesRange = 1...toString.count
        var countsEach = 0
        var newNumber = number
        for eachTime in timesRange {
            let eachNumber = newNumber % 10
            newNumber = newNumber / 10
            countsEach += specialRange.contains(eachNumber) ? 1 : 0
            print(newNumber)
        }
        answer = countsEach == toString.count ? "Special!!" : "NOT!!"
    }
    return answer
}
