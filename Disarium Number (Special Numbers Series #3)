// Definition
// Disarium number is the number that The sum of its digits powered with their respective positions is equal to the number itself.
// Task
// Given a number, Find if it is Disarium or not .
// Notes
// Number passed is always Positive .
// Return the result as String
// Input >> Output Examples
// disariumNumber(89) ==> return "Disarium !!"
// Explanation:
// Since , 8^1 + 9^2 = 89 , thus output is "Disarium !!"
// disariumNumber(564) ==> return "Not !!"
// Explanation:
// Since , 5^1 + 6^2 + 4^3 = 105 != 564 , thus output is "Not !!"

func poweredNumber(_ i: Int, _ number: Int) -> Int {
    guard i != 0 else {return number}
    var powered = 1
    let range = 0...i
    for each in range {
        powered *= number
    }
    return powered
}

func disariumNumber(_ number: Int) -> String {
    guard number >= 0 else {return "Input number should be positive"}
    var arrayOfNumbers: [Int] = []
    let toString = number.description
    let timesRange = 1...toString.count
    var newNumber = number
    for eachTime in timesRange {
        arrayOfNumbers.insert(newNumber % 10, at: 0)
        newNumber = newNumber / 10
    }
    var resultedNumber = 0
    for (i, num) in arrayOfNumbers.enumerated() {
        resultedNumber += poweredNumber(i, num)
    }
    let answer = number == resultedNumber ? "Disarium !!" : "Not !!"

    return answer
}
